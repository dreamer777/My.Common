<#@ template language="C#" hostspecific="True" debug="true" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ import namespace="Microsoft.VisualStudio.Shell" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+ 

        public static string EnsureWOBraces(string name)
        {
			if(name==null) return null;
            name = name.Trim();
            if (name.StartsWith("[")) name = name.Substring(1);
            if (name.EndsWith("]")) name = name.Substring(0, name.Length - 1);
            return name;
        }
		public static string EnsureInBraces(IEnumerable<XElement> es, Func<XElement, string> f, string separator=", ")
		{
			return string.Join(separator, es.Select(e=>EnsureInBraces(f(e))));
		}
        public static string EnsureInBraces(string name)
        {
			if(name==null) return null;
            name = name.Trim();
            if (name.StartsWith("dbo.")) return "dbo." + EnsureInBraces(name.Substring(4));
            if (!name.StartsWith("[")) name = "[" + name;
            if (!name.EndsWith("]")) name = name + "]";
            return name;
        }
        public static string GetSqlType(Type t)
        {
            if (t == typeof (Guid))
                return "uniqueidentifier";
            if (t == typeof (int))
                return "int";
            if (t == typeof (long))
                return "bigint";
            if (t == typeof (string))
                return "nvarchar(max)";
            if (t == typeof (short))
                return "smallint";
            if (t == typeof (byte))
                return "tinyint";
            if (t == typeof (bool))
                return "bit";
            if (t == typeof (decimal))
                return "decimal";
            if (t == typeof (char))
                return "nchar";
            if (t == typeof (DateTime))
                return "datetime";
            if (t == typeof (float))
                return "float";
            throw new Exception("Can not determine to sql type: [" + t.Name + "]");
        }
        public static string GetSqlType(string t)
        {
            if (t == "Guid")
                return "uniqueidentifier";
            if (t == "int")
                return "int";
            if (t == "long")
                return "bigint";
            if (t == "string")
                return "nvarchar(max)";
            if (t == "short")
                return "smallint";
            if (t == "byte")
                return "tinyint";
            if (t == "bool")
                return "bit";
            if (t == "decimal")
                return "decimal";
            if (t == "char")
                return "nchar";
            if (t == "DateTime")
                return "datetime";
            if (t == "float")
                return "float";
			return t;
            throw new Exception("Can not determine to sql type: [" + t + "]");
        }
	public static string GetToStringByDebuggerDisplay(string debdis)
	{
		if(string.IsNullOrEmpty(debdis))
			throw new Exception("debuggerdisplay is empty but tostring exists");
		
        Regex r = new Regex(@"\{(?<NAME>.*?)\}");
        int i = 0;
        List<string> names = new List<string>();
        string replaced = r.Replace(debdis, m =>
                                           {
                                               names.Add(m.Groups["NAME"].Captures[0].Value);
                                               return string.Format("[{{{0}}}]", i++.ToString());
                                           });

        string rv = string.Format(@"string.Format(@""{0}"", {1})", replaced, string.Join(", ", names.Select(s=>"this."+s)));
		return rv;
	}

	public static List<XElement> CalcXpath(XElement e, string xpath)
	{
		return ((IEnumerable) e.XPathEvaluate(xpath)).Cast<XElement>().ToList();
	}
	public static List<XElement> CalcXpath(XDocument e, string xpath)
	{
		return ((IEnumerable) e.XPathEvaluate(xpath)).Cast<XElement>().ToList();
	}
	public static string Aval(XElement e, string attrName)
	{
		return e==null || e.Attribute(attrName)==null?  null :e.Attribute(attrName).Value;
	}
	public static string Adbname(XElement e)
	{
		return Aval(e,"dbname") ?? Aval(e,"name");
	}
	public static string Aname(XElement e)
	{
		return Aval(e,"name");
	}
	public static string Atype(XElement e)
	{
		return Aval(e,"type");
	}
	public static string Asummary(XElement e)
	{
		return Aval(e,"summary")??"";
	}
    public static string Aupdateable(XElement e)
    {
        return Aval(e, "updateable");
    }
	public static bool Ahas(XElement e, string attrName)
	{
		return	e!=null && e.Attribute(attrName)!=null;
	}
	public static bool Abool(XElement e, string attrName, bool def=false)
	{
		string val = Aval(e, attrName);
		return val==null? def : bool.Parse(val);
	}
	public static bool IsNullable(XElement p)
	{
		 return 
			IsValueType(Atype(p)) && Abool(p, "nullable")
			||
			Atype(p).EndsWith("?") && Abool(p, "nullable", true)
			||
			!IsValueType(Atype(p)) && Abool(p, "nullable", true);			
	}
	
	
	public void WriteLine() { WriteLine(""); }
	public void WriteLine(int count)
	{
		for(int i=0; i<count; i++) WriteLine();
	}
	
	public static bool IsNullable(string type)
	{
		return type.EndsWith("?") || !IsValueType(type);
	}
	public static bool IsValueType(string typeName)
	{
		return typeName == "int" ||typeName == "long" ||typeName == "bool" ||typeName == "DateTime" ||typeName == "short" ||typeName == "byte" || typeName=="decimal" || typeName=="char" || typeName=="Guid";
	}
	public static bool IsPrimitive(string typeName)
	{
		return IsValueType(typeName) || typeName == "string";
	}
	
	
	public static string FirstUpper(string s)
	{
		return s.Substring(0,1).ToUpper() + s.Substring(1);
	}            
	public static string FirstLower(string s)
	{
		return s.Substring(0,1).ToLower() + s.Substring(1);
	} 	
	
	
	public string ReadLocalFile(string filename)
	{
     	return ReadFile(Path.Combine(Path.GetDirectoryName(this.Host.TemplateFile), filename));  
	}
	public string ReadFile(string filePath)
	{
     	return System.IO.File.ReadAllText(filePath);  
	}
	public XDocument ReadLocalXml(string filename)
	{
		return XDocument.Parse(ReadLocalFile(filename));
	}
	public XDocument ReadXml(string filePath)
	{
		return XDocument.Parse(ReadFile(filePath));
	}
    public List<XDocument> ReadLocalXmls(string searchPattern)
    { 
        List<XDocument> xmlList = new List<XDocument>();
        DirectoryInfo dir = new DirectoryInfo(Path.GetDirectoryName(this.Host.TemplateFile));
        FileInfo[] xmlFiles = dir.GetFiles(searchPattern);
		foreach (FileInfo f in xmlFiles)
            xmlList.Add(ReadLocalXml(f.Name));
        return xmlList;
    }
	public static string NewLine {get{ return Environment.NewLine; } }

    public static string summaryTemplate(int intend) 
	{ 
		return string.Format(@"{0}/// <summary>
{0}///     {{0}}
{0}/// </summary>", "".PadLeft(intend*4));
	}
	
#>
<#+
    List<string> __savedOutputs = new List<string>();
    Engine __engine = new Engine();

    void DeleteOldOutputs()
    {
        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
        foreach (EnvDTE.ProjectItem childProjectItem in templateProjectItem.ProjectItems)
        {
            if (!__savedOutputs.Contains(childProjectItem.Name))
                childProjectItem.Delete();
        }
    }

    void ProcessTemplate(string templateFileName, string outputFileName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        string template = File.ReadAllText(Host.ResolvePath(templateFileName));
        string output = __engine.ProcessTemplate(template, Host);
        File.WriteAllText(outputFilePath, output);

        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
        templateProjectItem.ProjectItems.AddFromFile(outputFilePath);

        __savedOutputs.Add(outputFileName);
    }

    void SaveOutput(string outputFileName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment = new StringBuilder();

        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
        templateProjectItem.ProjectItems.AddFromFile(outputFilePath);

        __savedOutputs.Add(outputFileName);
    }

    void AppendOutput(string outputFileName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        File.AppendAllText(outputFilePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment = new StringBuilder();

        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
        templateProjectItem.ProjectItems.AddFromFile(outputFilePath);

        __savedOutputs.Add(outputFileName);
    }

    EnvDTE.ProjectItem __getTemplateProjectItem()
    {
        EnvDTE.Project dteProject = __getTemplateProject();

        IVsProject vsProject = __dteProjectToVsProject(dteProject);

        int iFound = 0;
        uint itemId = 0;
        VSDOCUMENTPRIORITY[] pdwPriority = new VSDOCUMENTPRIORITY[1];
        int result = vsProject.IsDocumentInProject(Host.TemplateFile, out iFound, pdwPriority, out itemId);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.IsDocumentInProject");
        if (iFound == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");
        if (itemId == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider itemContext = null;
        result = vsProject.GetItemContext(itemId, out itemContext);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.GetItemContext");
        if (itemContext == null)
            throw new Exception("IVsProject.GetItemContext returned null");
    
        ServiceProvider itemContextService = new ServiceProvider(itemContext);
        EnvDTE.ProjectItem templateItem = (EnvDTE.ProjectItem)itemContextService.GetService(typeof(EnvDTE.ProjectItem));
        Debug.Assert(templateItem != null, "itemContextService.GetService returned null");

        return templateItem;
    }

    EnvDTE.Project __getTemplateProject()
    {
        IServiceProvider hostServiceProvider = (IServiceProvider)Host;
        if (hostServiceProvider == null)
            throw new Exception("Host property returned unexpected value (null)");

        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new Exception("Unable to retrieve EnvDTE.DTE");

        Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
        if (activeSolutionProjects == null)
            throw new Exception("DTE.ActiveSolutionProjects returned null");

        EnvDTE.Project dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
        if (dteProject == null)
            throw new Exception("DTE.ActiveSolutionProjects[0] returned null");

        return dteProject;
    }

    static IVsProject __dteProjectToVsProject(EnvDTE.Project project)
    {
        if (project == null) 
            throw new ArgumentNullException("project");
            
        string projectGuid = null;        

        // DTE does not expose the project GUID that exists at in the msbuild project file.        
        // Cannot use MSBuild object model because it uses a static instance of the Engine,         
        // and using the Project will cause it to be unloaded from the engine when the         
        // GC collects the variable that we declare.       
        using (XmlReader projectReader = XmlReader.Create(project.FileName))
        {
            projectReader.MoveToContent();
            object nodeName = projectReader.NameTable.Add("ProjectGuid");
            while (projectReader.Read())
            {
                if (Object.Equals(projectReader.LocalName, nodeName))
                {
                    projectGuid = (string)projectReader.ReadElementContentAsString(); 
                    break;
                }
            }
        }
        if (string.IsNullOrEmpty(projectGuid))
            throw new Exception("Unable to find ProjectGuid element in the project file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider dteServiceProvider = 
            (Microsoft.VisualStudio.OLE.Interop.IServiceProvider)project.DTE;
        IServiceProvider serviceProvider = new ServiceProvider(dteServiceProvider); 
        IVsHierarchy vsHierarchy = VsShellUtilities.GetHierarchy(serviceProvider, new Guid(projectGuid));
            
        IVsProject vsProject = (IVsProject)vsHierarchy;
        if (vsProject == null)
            throw new ArgumentException("Project is not a VS project.");
        return vsProject;
    }
#>